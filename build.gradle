plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "redstonecomptools" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        url = "https://jitpack.io"
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    mavenCentral()
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modCompileOnly "com.github.moulberry:AxiomClientAPI:1.0.5.3"

    modImplementation include ("maven.modrinth:midnightlib:${project.midnightlib_version}")

    implementation 'com.google.code.gson:gson:2.8.9'

    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

task updateModInfo {
    doLast {
        // Paths to files
        def versionFile = file('.version')
        def devFile = file('.dev')

        // Read .version file and .dev file
        def currentVersion = versionFile.exists() ? versionFile.text.trim() : "1.0.0"
        def isDevBuild = devFile.exists() ? devFile.text.trim().toBoolean() : false

        def baseVersion
        def devVersion = 0

        // Parse version
        if (currentVersion.contains("+d")) {
            (baseVersion, devVersion) = currentVersion.split("\\+d")
            devVersion = devVersion.toInteger()
        } else {
            baseVersion = currentVersion
        }

        def (major, minor, patch) = baseVersion.tokenize('.').collect { it.toInteger() }

        // Increment version based on dev mode
        if (isDevBuild) {
            devVersion++ // Increment dev version
        } else {
            patch++      // Increment patch version
            devVersion = 0 // Reset dev version
        }

        // Build new version
        def newVersion = isDevBuild ? "${major}.${minor}.${patch}+d${devVersion}" : "${major}.${minor}.${patch}"

        // Save new version to the .version file
        if (isDevBuild) {
            versionFile.text = newVersion
        } else {
            versionFile.text = "${newVersion}+d${devVersion}"
        }

        // Paths to main class and fabric.mod.json
        def mainClassFile = file('src/main/java/me/jtech/redstone_essentials/Redstone_Essentials.java')
        def gradlePropertiesFile = file('gradle.properties')

        // Update Java class
        mainClassFile.text = mainClassFile.text.replaceAll(
                /(String MOD_VERSION = ").*?(")/,
                "\$1$newVersion\$2"
        )

        // Update gradle.properties
        def gradleProperties = gradlePropertiesFile.text
        gradleProperties = gradleProperties.replaceAll(
                /(mod_version\s*=\s*).*/,
                "\$1$newVersion"
        )
        gradlePropertiesFile.text = gradleProperties

        println "Version updated to $newVersion"
    }
}
compileJava.dependsOn updateModInfo